{
 "Resources": {
  "DsSampleTable9229EA0A": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "bucketName",
      "AttributeType": "S"
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "bucketName",
      "KeyType": "HASH"
     }
    ],
    "ProvisionedThroughput": {
     "ReadCapacityUnits": 5,
     "WriteCapacityUnits": 5
    },
    "TableName": "ds-sample-table"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "DsProject1Stack/DsSampleTable/Resource"
   }
  },
  "DsSampleFunctionServiceRole5C1EAE42": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "DsProject1Stack/DsSampleFunction/ServiceRole/Resource"
   }
  },
  "DsSampleFunctionServiceRoleDefaultPolicy936A4845": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:ListAllMyBuckets",
       "Effect": "Allow",
       "Resource": "arn:aws:s3:::*"
      },
      {
       "Action": "dynamodb:*",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "DsSampleTable9229EA0A",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "DsSampleFunctionServiceRoleDefaultPolicy936A4845",
    "Roles": [
     {
      "Ref": "DsSampleFunctionServiceRole5C1EAE42"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "DsProject1Stack/DsSampleFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "DsSampleFunction54751B0E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\nimport time\nimport boto3\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('ds-sample-table')\n\ndef handler(event, context):\n  s3 = boto3.client('s3')\n  response = s3.list_buckets()\n  buckets = [bucket['Name'] for bucket in response['Buckets']]\n  for bucket in buckets:\n    table.put_item(Item={'bucketName': bucket})\n  print(\"S3 Buckets:\", buckets)\n  return {\"statusCode\": 200, \"body\": str(buckets)}\n      "
    },
    "FunctionName": "ds-sample-function",
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "DsSampleFunctionServiceRole5C1EAE42",
      "Arn"
     ]
    },
    "Runtime": "python3.8"
   },
   "DependsOn": [
    "DsSampleFunctionServiceRoleDefaultPolicy936A4845",
    "DsSampleFunctionServiceRole5C1EAE42"
   ],
   "Metadata": {
    "aws:cdk:path": "DsProject1Stack/DsSampleFunction/Resource"
   }
  },
  "Rule4C995B7F": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "ScheduleExpression": "rate(3 minutes)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "DsSampleFunction54751B0E",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "DsProject1Stack/Rule/Resource"
   }
  },
  "RuleAllowEventRuleDsProject1StackDsSampleFunction62639A49B5634D94": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DsSampleFunction54751B0E",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "Rule4C995B7F",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "DsProject1Stack/Rule/AllowEventRuleDsProject1StackDsSampleFunction62639A49"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/02MywqDMBBFv6X7OFWh/QGha0m7L3kVRpMJmESRkH8vjV24uof76qG7ddBexBYapefGooT8jELNTGzhnfVOwnktIb+EtIYNH6pQmBVOagH5kUhF9PSLzjyaxWEI6KkwFA4y98e+6ugtqr32KhVmVkMxQObpX0vWlMK4CT4t6rBOPHjSGOs7eW1gCte1b6G7Q3uZAmKzJIroDPBDvyYSS6PpAAAA"
   },
   "Metadata": {
    "aws:cdk:path": "DsProject1Stack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}